/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BatteryCount } from "./BatteryCount";
import { BatteryCountCountArgs } from "./BatteryCountCountArgs";
import { BatteryCountFindManyArgs } from "./BatteryCountFindManyArgs";
import { BatteryCountFindUniqueArgs } from "./BatteryCountFindUniqueArgs";
import { DeleteBatteryCountArgs } from "./DeleteBatteryCountArgs";
import { BatteryCountService } from "../batteryCount.service";
@graphql.Resolver(() => BatteryCount)
export class BatteryCountResolverBase {
  constructor(protected readonly service: BatteryCountService) {}

  async _batteryCountsMeta(
    @graphql.Args() args: BatteryCountCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BatteryCount])
  async batteryCounts(
    @graphql.Args() args: BatteryCountFindManyArgs
  ): Promise<BatteryCount[]> {
    return this.service.batteryCounts(args);
  }

  @graphql.Query(() => BatteryCount, { nullable: true })
  async batteryCount(
    @graphql.Args() args: BatteryCountFindUniqueArgs
  ): Promise<BatteryCount | null> {
    const result = await this.service.batteryCount(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BatteryCount)
  async deleteBatteryCount(
    @graphql.Args() args: DeleteBatteryCountArgs
  ): Promise<BatteryCount | null> {
    try {
      return await this.service.deleteBatteryCount(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
