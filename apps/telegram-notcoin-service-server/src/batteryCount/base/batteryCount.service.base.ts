/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, BatteryCount as PrismaBatteryCount } from "@prisma/client";

export class BatteryCountServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BatteryCountCountArgs, "select">
  ): Promise<number> {
    return this.prisma.batteryCount.count(args);
  }

  async batteryCounts(
    args: Prisma.BatteryCountFindManyArgs
  ): Promise<PrismaBatteryCount[]> {
    return this.prisma.batteryCount.findMany(args);
  }
  async batteryCount(
    args: Prisma.BatteryCountFindUniqueArgs
  ): Promise<PrismaBatteryCount | null> {
    return this.prisma.batteryCount.findUnique(args);
  }
  async createBatteryCount(
    args: Prisma.BatteryCountCreateArgs
  ): Promise<PrismaBatteryCount> {
    return this.prisma.batteryCount.create(args);
  }
  async updateBatteryCount(
    args: Prisma.BatteryCountUpdateArgs
  ): Promise<PrismaBatteryCount> {
    return this.prisma.batteryCount.update(args);
  }
  async deleteBatteryCount(
    args: Prisma.BatteryCountDeleteArgs
  ): Promise<PrismaBatteryCount> {
    return this.prisma.batteryCount.delete(args);
  }
}
