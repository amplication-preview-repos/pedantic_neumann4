/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BoostService } from "../boost.service";
import { BoostCreateInput } from "./BoostCreateInput";
import { Boost } from "./Boost";
import { BoostFindManyArgs } from "./BoostFindManyArgs";
import { BoostWhereUniqueInput } from "./BoostWhereUniqueInput";
import { BoostUpdateInput } from "./BoostUpdateInput";

export class BoostControllerBase {
  constructor(protected readonly service: BoostService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Boost })
  async createBoost(@common.Body() data: BoostCreateInput): Promise<Boost> {
    return await this.service.createBoost({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Boost] })
  @ApiNestedQuery(BoostFindManyArgs)
  async boosts(@common.Req() request: Request): Promise<Boost[]> {
    const args = plainToClass(BoostFindManyArgs, request.query);
    return this.service.boosts({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Boost })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async boost(
    @common.Param() params: BoostWhereUniqueInput
  ): Promise<Boost | null> {
    const result = await this.service.boost({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Boost })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBoost(
    @common.Param() params: BoostWhereUniqueInput,
    @common.Body() data: BoostUpdateInput
  ): Promise<Boost | null> {
    try {
      return await this.service.updateBoost({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Boost })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBoost(
    @common.Param() params: BoostWhereUniqueInput
  ): Promise<Boost | null> {
    try {
      return await this.service.deleteBoost({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
