/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ClickCount } from "./ClickCount";
import { ClickCountCountArgs } from "./ClickCountCountArgs";
import { ClickCountFindManyArgs } from "./ClickCountFindManyArgs";
import { ClickCountFindUniqueArgs } from "./ClickCountFindUniqueArgs";
import { DeleteClickCountArgs } from "./DeleteClickCountArgs";
import { ClickCountService } from "../clickCount.service";
@graphql.Resolver(() => ClickCount)
export class ClickCountResolverBase {
  constructor(protected readonly service: ClickCountService) {}

  async _clickCountsMeta(
    @graphql.Args() args: ClickCountCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ClickCount])
  async clickCounts(
    @graphql.Args() args: ClickCountFindManyArgs
  ): Promise<ClickCount[]> {
    return this.service.clickCounts(args);
  }

  @graphql.Query(() => ClickCount, { nullable: true })
  async clickCount(
    @graphql.Args() args: ClickCountFindUniqueArgs
  ): Promise<ClickCount | null> {
    const result = await this.service.clickCount(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ClickCount)
  async deleteClickCount(
    @graphql.Args() args: DeleteClickCountArgs
  ): Promise<ClickCount | null> {
    try {
      return await this.service.deleteClickCount(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
