/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SubTaskService } from "../subTask.service";
import { SubTaskCreateInput } from "./SubTaskCreateInput";
import { SubTask } from "./SubTask";
import { SubTaskFindManyArgs } from "./SubTaskFindManyArgs";
import { SubTaskWhereUniqueInput } from "./SubTaskWhereUniqueInput";
import { SubTaskUpdateInput } from "./SubTaskUpdateInput";

export class SubTaskControllerBase {
  constructor(protected readonly service: SubTaskService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SubTask })
  async createSubTask(
    @common.Body() data: SubTaskCreateInput
  ): Promise<SubTask> {
    return await this.service.createSubTask({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SubTask] })
  @ApiNestedQuery(SubTaskFindManyArgs)
  async subTasks(@common.Req() request: Request): Promise<SubTask[]> {
    const args = plainToClass(SubTaskFindManyArgs, request.query);
    return this.service.subTasks({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SubTask })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async subTask(
    @common.Param() params: SubTaskWhereUniqueInput
  ): Promise<SubTask | null> {
    const result = await this.service.subTask({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SubTask })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSubTask(
    @common.Param() params: SubTaskWhereUniqueInput,
    @common.Body() data: SubTaskUpdateInput
  ): Promise<SubTask | null> {
    try {
      return await this.service.updateSubTask({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SubTask })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSubTask(
    @common.Param() params: SubTaskWhereUniqueInput
  ): Promise<SubTask | null> {
    try {
      return await this.service.deleteSubTask({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
