/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Squad } from "./Squad";
import { SquadCountArgs } from "./SquadCountArgs";
import { SquadFindManyArgs } from "./SquadFindManyArgs";
import { SquadFindUniqueArgs } from "./SquadFindUniqueArgs";
import { DeleteSquadArgs } from "./DeleteSquadArgs";
import { SquadService } from "../squad.service";
@graphql.Resolver(() => Squad)
export class SquadResolverBase {
  constructor(protected readonly service: SquadService) {}

  async _squadsMeta(
    @graphql.Args() args: SquadCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Squad])
  async squads(@graphql.Args() args: SquadFindManyArgs): Promise<Squad[]> {
    return this.service.squads(args);
  }

  @graphql.Query(() => Squad, { nullable: true })
  async squad(
    @graphql.Args() args: SquadFindUniqueArgs
  ): Promise<Squad | null> {
    const result = await this.service.squad(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Squad)
  async deleteSquad(
    @graphql.Args() args: DeleteSquadArgs
  ): Promise<Squad | null> {
    try {
      return await this.service.deleteSquad(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
