/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TapBotService } from "../tapBot.service";
import { TapBotCreateInput } from "./TapBotCreateInput";
import { TapBot } from "./TapBot";
import { TapBotFindManyArgs } from "./TapBotFindManyArgs";
import { TapBotWhereUniqueInput } from "./TapBotWhereUniqueInput";
import { TapBotUpdateInput } from "./TapBotUpdateInput";

export class TapBotControllerBase {
  constructor(protected readonly service: TapBotService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TapBot })
  async createTapBot(@common.Body() data: TapBotCreateInput): Promise<TapBot> {
    return await this.service.createTapBot({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TapBot] })
  @ApiNestedQuery(TapBotFindManyArgs)
  async tapBots(@common.Req() request: Request): Promise<TapBot[]> {
    const args = plainToClass(TapBotFindManyArgs, request.query);
    return this.service.tapBots({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TapBot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tapBot(
    @common.Param() params: TapBotWhereUniqueInput
  ): Promise<TapBot | null> {
    const result = await this.service.tapBot({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TapBot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTapBot(
    @common.Param() params: TapBotWhereUniqueInput,
    @common.Body() data: TapBotUpdateInput
  ): Promise<TapBot | null> {
    try {
      return await this.service.updateTapBot({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TapBot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTapBot(
    @common.Param() params: TapBotWhereUniqueInput
  ): Promise<TapBot | null> {
    try {
      return await this.service.deleteTapBot({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
